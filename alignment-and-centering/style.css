/* CSS Normalize */
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

/* Box-sizing border-box */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }


/* Some default styles to make each box visible */
.box {
  color:  white;
  font-size:  100px;
  text-align: center;
  text-shadow:  4px 4px 0 rgba(0,0,0,0.1);
  padding:  10px;
}

/* Colours for each box */
.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}


/* We start writing out flexbox here. The above is just page setup */
/* Justify content is how the items align on the main axis */
/*container {
  display: flex;*/
  /* flex-start is the default. As the items are aligned to the flex container.
  flex-end starts on the right hand side because that is the end of the flex
  container. center moves the items to the middle. you don't need any margin
  tricks. space-between means provide equilvalent space between each item. space
  -around takes into account the space of the first and last item */
  /* now lets talk about switching around the flex direction because it impacts
  the justify-content. When you switch from row to column, the main axis will go
  from top to bottom instead of left to right. Remember to ask where is the main
  axis and cross axis */
  /*justify-content: space-between;
  border: 10px solid mistyrose;
  flex-direction: column;
  min-height: 100vh;
}*/

/* Now we will talk about alignment and centering with align-items: we are
going to be more concerned about the cross-axis which moves from top to bottom.
If you add align-items center, you will need some height because there is no room
to move the item vertically to the center (align items vertically centers them).
align-items: stretch is default mode. flex-start will start them all the way at
the top. flex-end starts it at the end. There is baseline which looks the text
in your items and will make sure that the bottom of every single letter/number
is aligned properly. If you flex-direction: column, you are switching the axises.
Our cross axis is no longer top to bottom. It is now left to right. Overall align
items is cross axis and needs to height to work. */

/*.container {
  display: flex;
  border: 10px solid mistyrose;
  height: 100vh;
  align-items: flex-start;
}*/

/* Next we are working on Alignment and centering with align-content. Justify and
align content focus on what to do with additional white space. We talked about
justify-content: space-between which equally divides the space between each item
(this is what happens in the space in the main axis) What about the cross axis?
Align content works on the cross axis. We need extra space in our vertical axis.
Align content only works when we have multiple lines of code and what should it
do regarding the space on the vertical (cross) axis. So we need some wrapping.
flex wrap will give us a true width for our flex items and will wrap around the
container. align content by default is stretch. If you add align-content:flex-start
the height of them is no longer stretched. If you add align-content:flex-end you
will have extra room on the top. space between puts them in between each row. space
around will put them space on top, in between and the bottom of each row. center
will you want to vertically center an item. If you want to move the tenth box to
the center, add justify-content:center. Remember with align-content, you need some
sort of flex-wrap, and are concerned with the cross axis. */

/*.container {
  display: flex;
  border: 10px solid mistyrose;
  height: 100vh;
  flex-wrap: wrap;
  align-content: center;
}

.box {
  width: 33.333%;
}*/

/* now we are going to focus on align-self */

.container {
  display: flex;
  border: 10px solid mistyrose;
  height: 100vh;
  /* setup align-items to flex-start*/
  align-items: flex-start;
}

.box {
  width: 33.333%;
}

.box2 {
  padding-bottom: 200px;
}

.box6 {
  padding-bottom: 0px;
}

.box9 {
  padding-bottom: 50px;
  /* overwrites the align-items:flex-start;*/
  align-self: stretch;
}
